//переменные ---------------------------------
let str = "Привет";
let phrase = `Обратные кавычки позволяют встраивать переменные ${str}`;
// -------------------------------------------

//типы данных---------------------------------
infinity - бесконечность
nan - вычислительная ошибка
numer - от - 2 в 53 степени - 1 до 2 в 53 степени - 1
bigInt - 123....6 n
string - строка
boolean - логический
undefined - значение не было присвоено
null - пусто(не одно и то же что отсуствует ссылка на объект)
typeof - предоставляе тип переменной
//--------------------------------------------

//ф-ии для работы с пользователями -----------
alert('');
confirm('') // true / false
prompt('', '') //    return inputvalue

//модальное окно с строкой для ввода, результат после ОК переносит в rst
let rst = prompt('Как тебя зовут?')

// модальное окно, возвращает true/false
let isBoss = confirm("Ты здесь главный?");
// -------------------------------------------


//Преобразования------------------------------
//строковое
let value = true;
alert(typeof value); // boolean
value = String(value); // теперь value это строка "true"
alert(typeof value); // string

//численное
alert("6" / "2"); // 3, строки преобразуются в числа
let str = "123";
alert(typeof str); // string
let num = Number(str); // становится числом 123
alert(typeof num); // number

//логическое
alert(Boolean(1)); // true
alert(Boolean(0)); // false
alert(Boolean("Привет!")); // true
alert(Boolean("")); // false
alert(Boolean("0")); // true
alert(Boolean(" ")); // пробел это тоже true (любая непустая строка это true)

// -------------------------------------------

//строгое сравнение значений -----------------
=== //сравнивает без приведения типов
// -------------------------------------------


//стрелочные функции--------------------------
let func = (arg1, arg2, ...argN) => expression

let sum = (a, b) => a + b;

/* Более короткая форма для:

let sum = function(a, b) {
  return a + b;
};
*/

let sum = (a, b) => { // фигурная скобка, открывающая тело многострочной функции
    let result = a + b;
    return result; // при фигурных скобках для возврата значения нужно явно вызвать return
};

let sayHi = () => alert("Hello!");

//--------------------------------------------

//отладка js----------------------------------
в web - console(crtl + shift + k - firefox) влкадка отладкаи выставляем точки останова
debugger; // <-- здесь выполнение прерывается
console.log(''); //логирование
//--------------------------------------------


//Objects-------------------------------------
Объекты– это ассоциативные массивы с рядом дополнительных возможностей.

Они хранят свойства(пары ключ - значение), где:
    - Ключи свойств должны быть строками или символами(обычно строками)
    - Зачения могут быть любого типа

Чтобы получить доступ к свойству, мы можем использовать:
    - Запись через точку: obj.property
    - Квадратные скобки obj["property"].Квадратные скобки позволяют взять ключ из переменной, например, obj[varWithKey]

Дополнительные операторы:
    - Удаление свойства: delete obj.prop
    - Проверка существования свойства: "key" in obj
    - Перебор свойств объекта: цикл for (let key in obj)

 Пример объекта 
 let user = {     // объект
    name: "John",  // под ключом "name" хранится значение "John"
    age: 30        // под ключом "age" хранится значение 30
  };
//-------------------------------------------    

// this -------------------------------------
Значение this определяется во время исполнения кода:

    - При объявлении любой функции в ней можно использовать this, но этот this не имеет значения до тех пор, пока функция не будет вызвана.
    - Эта функция может быть скопирована между объектами (из одного объекта в другой).
    - Когда функция вызывается синтаксисом «метода» – object.method(), значением this во время вызова является объект перед точкой.

Также ещё раз заметим, что стрелочные функции являются особенными – у них нет this. Когда внутри стрелочной функции обращаются к this, то его значение берётся снаружи

Интересный Пример

let user = { name: "Джон" };
let admin = { name: "Админ" };

function sayHi() {
  alert( this.name );
}

// используем одну и ту же функцию в двух объектах
user.f = sayHi;
admin.f = sayHi;

// вызовы функции, приведённые ниже, имеют разное значение this
// "this" внутри функции является ссылкой на объект, который указан "перед точкой"
user.f(); // Джон  (this == user)
admin.f(); // Админ  (this == admin)

admin['f'](); // Админ (неважен способ доступа к методу - через точку или квадратные скобки)
//--------------------------------------------

function multiplyNumeric(obj) {
    for (let key in obj) {
      if (typeof obj[key] == 'number') {
        obj[key] *= 2;
        
      }
      alert(obj.varWithKey)
    }

  }
